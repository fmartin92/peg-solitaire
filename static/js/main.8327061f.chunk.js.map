{"version":3,"sources":["game/Algorithms.js","game/Game.js","Board.js","AlgorithmSelector.js","game/DecisionNode.js","game/Bot.js","DebugTools.js","game/DecisionTree.js","App.js","serviceWorker.js","index.js"],"names":["HEIGHT_PARAM","height","name","min","max","default","WEIGHTED_SAMPLING_PARAM","pow","RandomChoice","params","play","decisionNode","randomItem","children","RandomMaxDescendants","maxScoringItems","child","getSubtreeSize","items","weightFn","weights","map","sumOfWeights","reduce","x","y","randomValue","Math","random","total","i","scoreFn","scores","maxScore","filter","_","idx","ALGORITHMS","game","getNumConnectedComponents","item","DEFAULT_ALGORITHM","makeDefaultAlgorithmParams","algorithm","algorithmParams","Object","entries","forEach","key","paramDescriptor","UP","RIGHT","DOWN","LEFT","INITIAL_BOARD","line","split","copyBoard","board","cell","Game","this","_board","row","col","direction","dstRow","dstCol","Error","srcRow","srcCol","_computeDstSquare","row1","col1","_isValidMove","newBoard","set","value","_computeIntermediateDstSquare","intermediateRow","intermediateCol","_isWithinBounds","get","moves","_computeJumpDstSquare","push","midRow","midCol","getPossibleMoves","length","neighborPegs","addCoordIfNeighborPeg","_isPeg","visitedCoords","queue","shift","curRow","curCol","coordAsString","has","add","_getNeighborPegs","coord","numConnectedComponents","Set","_bfs","toString","c","join","otherGame","localeCompare","DEFAULT_STATE","candidateTargets","moveSrcRow","moveSrcCol","Board","props","state","coords","className","cssClassNames","isCandidateTarget","isPegDraggable","draggable","onMouseEnter","onMouseLeave","onDragStart","onPegDragStart","onDragEnd","onPegDragEnd","onDragOver","event","preventDefault","onDrop","onSquareDrop","setState","getValidMovesAt","dragDidStop","isMoving","newGame","moveTo","gameChangedCb","find","move","React","Component","AlgorithmSelector","onChange","onAlgorithmChange","target","DecisionNode","parent","_game","_parent","_children","maxHeight","node","equals","Bot","_algorithm","_params","isOver","clearParent","n","_scores","_times","t0","performance","now","run","t1","numPegsLeft","truncateFloat","parseInt","DebugTools","makeDefaultAlgorithmState","numIterations","times","type","onClick","nonEmptyOutput","emptyOutput","scoresStats","computeStats","timeStats","statsTable","Array","from","histogram","entry","repeat","stats","caption","mean","stdDev","bot","runMany","values","sqrt","prev","computeHistogram","sort","a","b","Map","score","DecisionTree","restart","_rootNode","_currentNode","_mostRecentNode","gameOrNode","newNode","findChildByGame","currentNode","includes","canUndo","canRedo","App","decisionTree","defaultParams","onGameChange","forceUpdate","newMovement","disabled","undo","redo","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8327061f.chunk.js","sourcesContent":["const HEIGHT_PARAM = { height: { name: \"Height\", min: 2, max: 6, default: 2 } };\r\nconst WEIGHTED_SAMPLING_PARAM = {\r\n  pow: { name: \"Power\", min: 1, max: 40, default: 25 },\r\n};\r\n\r\nexport const RandomChoice = {\r\n  name: \"Random choice\",\r\n  params: {},\r\n  play: (decisionNode) => randomItem(decisionNode.children),\r\n};\r\n\r\nexport const RandomMaxDescendants = {\r\n  name: \"Maximize descendants\",\r\n  params: { ...HEIGHT_PARAM },\r\n  play: (decisionNode, params) => {\r\n    const candidateItems = maxScoringItems(decisionNode.children, (child) =>\r\n      child.getSubtreeSize(params.height)\r\n    );\r\n    return randomItem(candidateItems);\r\n  },\r\n};\r\n\r\nexport const RandomWeightedMaxDescendants = {\r\n  name: \"Randomized maximize descendants\",\r\n  params: {\r\n    ...HEIGHT_PARAM,\r\n    ...WEIGHTED_SAMPLING_PARAM,\r\n  },\r\n  play: (decisionNode, params) => {\r\n    return randomItem(decisionNode.children, (child) =>\r\n      Math.pow(child.getSubtreeSize(params.height), params.pow)\r\n    );\r\n  },\r\n};\r\n\r\nexport const RandomWeightedMaxDescendantsMinComponents = {\r\n  name: \"Few connected components\",\r\n  params: {\r\n    ...HEIGHT_PARAM,\r\n    ...WEIGHTED_SAMPLING_PARAM,\r\n  },\r\n  play: (decisionNode, params) => {\r\n    const candidateItems = minScoringItems(decisionNode.children, (child) =>\r\n      child.game.getNumConnectedComponents()\r\n    );\r\n\r\n    return randomItem(candidateItems, (child) =>\r\n      Math.pow(child.getSubtreeSize(params.height), params.pow)\r\n    );\r\n  },\r\n};\r\n\r\nfunction randomItem(items, weightFn = () => 1) {\r\n  const weights = items.map(weightFn);\r\n  const sumOfWeights = weights.reduce((x, y) => x + y, 0);\r\n  const randomValue = Math.random() * sumOfWeights;\r\n  let total = 0;\r\n  let i = -1;\r\n  while (total <= randomValue) {\r\n    i++;\r\n    total += weights[i];\r\n  }\r\n  return items[i];\r\n}\r\n\r\nfunction maxScoringItems(items, scoreFn) {\r\n  const scores = items.map(scoreFn);\r\n  const maxScore = Math.max(...scores);\r\n  return items.filter((_, idx) => scores[idx] === maxScore);\r\n}\r\n\r\nfunction minScoringItems(items, scoreFn) {\r\n  return maxScoringItems(items, (item) => -scoreFn(item));\r\n}\r\n\r\nexport const ALGORITHMS = [\r\n  RandomChoice,\r\n  RandomMaxDescendants,\r\n  RandomWeightedMaxDescendants,\r\n  RandomWeightedMaxDescendantsMinComponents,\r\n];\r\n\r\nexport const DEFAULT_ALGORITHM = RandomMaxDescendants;\r\n\r\nexport function makeDefaultAlgorithmParams(algorithm) {\r\n  const algorithmParams = {};\r\n  Object.entries(algorithm.params).forEach(\r\n    ([key, paramDescriptor]) => (algorithmParams[key] = paramDescriptor.default)\r\n  );\r\n  return algorithmParams;\r\n}\r\n","export const UP = \"up\";\nexport const RIGHT = \"right\";\nexport const DOWN = \"down\";\nexport const LEFT = \"left\";\n\nexport const INVALID_SQUARE = \" \";\nexport const EMPTY_SQUARE = \".\";\nexport const PEG_SQUARE = \"X\";\n\nexport const BOARD_SIDE_LENGTH = 7;\n\nconst INITIAL_BOARD = [\n  \"  XXX  \",\n  \"  XXX  \",\n  \"XXXXXXX\",\n  \"XXX.XXX\",\n  \"XXXXXXX\",\n  \"  XXX  \",\n  \"  XXX  \",\n].map((line) => line.split(\"\"));\n\nconst copyBoard = (board) => board.map(line => line.map(cell => cell));\n\nexport class Game {\n  constructor(board) {\n    this._board = board || copyBoard(INITIAL_BOARD);\n  }\n\n  _computeDstSquare(row, col, direction) {\n    /*returns the square you get after you moved from the square at indicated\n      row and col in the given direction*/\n    let dstRow = row,\n      dstCol = col;\n\n    switch (direction) {\n      case UP:\n        dstRow--;\n        break;\n      case RIGHT:\n        dstCol++;\n        break;\n      case DOWN:\n        dstRow++;\n        break;\n      case LEFT:\n        dstCol--;\n        break;\n      default:\n        throw new Error(`${direction} is not a valid direction`);\n    }\n\n    return [dstRow, dstCol];\n  }\n\n  _computeIntermediateDstSquare(srcRow, srcCol, dstRow, dstCol) {\n    /*returns the square in between a source square and a jump target square*/\n    return [(srcRow + dstRow) / 2, (srcCol + dstCol) / 2];\n  }\n\n  _computeJumpDstSquare(row, col, direction) {\n    /*returns the square you get after you moved *twice* from the square at indicated\n      row and col in the given direction*/\n    const [row1, col1] = this._computeDstSquare(row, col, direction);\n    return this._computeDstSquare(row1, col1, direction);\n  }\n\n  moveTo(srcRow, srcCol, dstRow, dstCol) {\n    /*validates the move and returns a new Game instance with that move played*/\n    if (!this._isValidMove(srcRow, srcCol, dstRow, dstCol)) {\n      throw new Error(\"Invalid move\");\n    }\n    const newBoard = copyBoard(this._board);\n    const set = (row, col, value) => (newBoard[row][col] = value);\n\n    const [\n      intermediateRow,\n      intermediateCol,\n    ] = this._computeIntermediateDstSquare(srcRow, srcCol, dstRow, dstCol);\n\n    set(srcRow, srcCol, EMPTY_SQUARE);\n    set(intermediateRow, intermediateCol, EMPTY_SQUARE);\n    set(dstRow, dstCol, PEG_SQUARE);\n\n    return new Game(newBoard);\n  }\n\n  _isValidMove(srcRow, srcCol, dstRow, dstCol) {\n    const [\n      intermediateRow,\n      intermediateCol,\n    ] = this._computeIntermediateDstSquare(srcRow, srcCol, dstRow, dstCol);\n\n    if (!this._isWithinBounds(srcRow, srcCol)) return false;\n    if (!this._isWithinBounds(dstRow, dstCol)) return false;\n\n    if (this.get(srcRow, srcCol) !== PEG_SQUARE) return false;\n    if (this.get(intermediateRow, intermediateCol) !== PEG_SQUARE) return false;\n    if (this.get(dstRow, dstCol) !== EMPTY_SQUARE) return false;\n\n    return true;\n  }\n\n  getValidMovesAt(row, col) {\n    const moves = [];\n    [UP, RIGHT, DOWN, LEFT].forEach((direction) => {\n      const [dstRow, dstCol] = this._computeJumpDstSquare(row, col, direction);\n      if (this._isValidMove(row, col, dstRow, dstCol)) {\n        moves.push([dstRow, dstCol]);\n      }\n    });\n    return moves;\n  }\n\n  getPossibleMoves() {\n    const moves = [];\n\n    for (let srcRow = 0; srcRow < BOARD_SIDE_LENGTH; srcRow++) {\n      for (let srcCol = 0; srcCol < BOARD_SIDE_LENGTH; srcCol++) {\n        if (this.get(srcRow, srcCol) !== PEG_SQUARE) continue;\n\n        [UP, RIGHT, DOWN, LEFT].forEach((direction) => {\n          const [midRow, midCol] = this._computeDstSquare(srcRow, srcCol, direction);\n          const [dstRow, dstCol] = this._computeDstSquare(midRow, midCol, direction);\n\n          if (!this._isWithinBounds(dstRow, dstCol)) return;\n\n          if (this.get(midRow, midCol) === PEG_SQUARE &&\n              this.get(dstRow, dstCol) === EMPTY_SQUARE) {\n            const newBoard = copyBoard(this._board);\n            newBoard[srcRow][srcCol] = EMPTY_SQUARE;\n            newBoard[midRow][midCol] = EMPTY_SQUARE;\n            newBoard[dstRow][dstCol] = PEG_SQUARE;\n            moves.push(new Game(newBoard));\n          }\n        });\n      }\n    }\n\n    return moves;\n  }\n\n  isOver() {\n    return this.getPossibleMoves().length === 0;\n  }\n\n  get(row, col) {\n    return this._board[row][col];\n  }\n\n  _isWithinBounds(row, col) {\n    return (\n      row >= 0 && row < BOARD_SIDE_LENGTH && col >= 0 && col < BOARD_SIDE_LENGTH\n    );\n  }\n\n  _isPeg(row, col) {\n    return this._isWithinBounds(row, col) && this.get(row, col) === PEG_SQUARE;\n  }\n\n  _getNeighborPegs(row, col) {\n    const neighborPegs = [];\n    const addCoordIfNeighborPeg = (row, col) => {\n      if (this._isPeg(row, col)) {\n        neighborPegs.push([row, col]);\n      }\n    };\n    addCoordIfNeighborPeg(row, col - 1);\n    addCoordIfNeighborPeg(row + 1, col);\n    addCoordIfNeighborPeg(row, col + 1);\n    addCoordIfNeighborPeg(row - 1, col);\n    return neighborPegs;\n  }\n\n  _bfs(row, col, visitedCoords) {\n    const queue = [[row, col]];\n    while (queue.length !== 0) {\n      const [curRow, curCol] = queue.shift();\n      const coordAsString = `${curRow},${curCol}`;\n      if (!visitedCoords.has(coordAsString)) {\n        visitedCoords.add(coordAsString);\n        this._getNeighborPegs(curRow, curCol)\n          .filter((coord) => !visitedCoords.has(`${coord[0]},${coord[1]}`))\n          .forEach((coord) => queue.push(coord));\n      }\n    }\n  }\n\n  getNumConnectedComponents() {\n    let numConnectedComponents = 0;\n    const visitedCoords = new Set();\n    for (let row = 0; row < BOARD_SIDE_LENGTH; row++) {\n      for (let col = 0; col < BOARD_SIDE_LENGTH; col++) {\n        if (this._isPeg(row, col) && !visitedCoords.has(`${row},${col}`)) {\n          numConnectedComponents++;\n          this._bfs(row, col, visitedCoords);\n        }\n      }\n    }\n    return numConnectedComponents;\n  }\n\n  numPegsLeft() {\n    return this.toString()\n      .split(\"\")\n      .filter((c) => c === PEG_SQUARE).length;\n  }\n\n  toString() {\n    return this._board.map((line) => line.join(\"\")).join(\"\\n\");\n  }\n\n  equals(otherGame) {\n    return this.toString().localeCompare(otherGame.toString()) === 0;\n  }\n}\n","import React from \"react\";\nimport \"./Board.css\";\nimport {\n  INVALID_SQUARE,\n  EMPTY_SQUARE,\n  PEG_SQUARE,\n  BOARD_SIDE_LENGTH,\n} from \"./game/Game\";\n\nconst DEFAULT_STATE = {\n  candidateTargets: [],\n  moveSrcRow: -1,\n  moveSrcCol: -1,\n};\n\nexport class Board extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = DEFAULT_STATE;\n  }\n\n  render() {\n    const coords = [];\n    for (let row = 0; row < BOARD_SIDE_LENGTH; row++) {\n      for (let col = 0; col < BOARD_SIDE_LENGTH; col++) {\n        coords.push([row, col]);\n      }\n    }\n\n    return (\n      <div className=\"board\">\n        {coords.map((coord) => {\n          const [row, col] = coord;\n\n          const cssClassNames = [];\n\n          switch (this.props.game.get(row, col)) {\n            case INVALID_SQUARE:\n              cssClassNames.push(\"invalid-square\");\n              break;\n            case EMPTY_SQUARE:\n              cssClassNames.push(\"empty-square\");\n              break;\n            case PEG_SQUARE:\n              cssClassNames.push(\"peg-square\");\n              break;\n            default:\n              throw new Error(\n                `invalid square at ${row}, ${col}: \"${this.props.game.get(\n                  row,\n                  col\n                )}\"`\n              );\n          }\n\n          if (this.isCandidateTarget(row, col))\n            cssClassNames.push(\"candidate-target\");\n\n          if (row === this.state.moveSrcRow && col === this.state.moveSrcCol)\n            cssClassNames.push(\"selected\");\n\n          if (this.isPegDraggable(row, col)) cssClassNames.push(\"draggable\");\n\n          return (\n            <div\n              key={`${row},${col}`}\n              className={`cell ${cssClassNames.join(\" \")}`}\n              draggable={this.isPegDraggable(row, col)}\n              onMouseEnter={() => this.onMouseEnter(row, col)}\n              onMouseLeave={() => this.onMouseLeave()}\n              onDragStart={() => this.onPegDragStart(row, col)}\n              onDragEnd={() => this.onPegDragEnd()}\n              // event dragover will inhibit drop if the default behavior is not prevented\n              onDragOver={(event) => event.preventDefault()}\n              onDrop={() => this.onSquareDrop(row, col)}\n            >\n              <div className=\"peg\"></div>\n            </div>\n          );\n        })}\n      </div>\n    );\n  }\n\n  onMouseEnter(row, col) {\n    this.setState({\n      candidateTargets: this.props.game.getValidMovesAt(row, col),\n    });\n  }\n\n  onMouseLeave(event) {\n    this.setState(DEFAULT_STATE);\n  }\n\n  onPegDragStart(row, col) {\n    if (!this.isPegDraggable(row, col)) return;\n    this.setState({\n      candidateTargets: this.props.game.getValidMovesAt(row, col),\n      moveSrcRow: row,\n      moveSrcCol: col,\n    });\n  }\n\n  onPegDragEnd() {\n    this.dragDidStop();\n  }\n\n  onSquareDrop(row, col) {\n    if (this.isMoving() && this.isCandidateTarget(row, col)) {\n      const newGame = this.props.game.moveTo(\n        this.state.moveSrcRow,\n        this.state.moveSrcCol,\n        row,\n        col\n      );\n      this.props.gameChangedCb(newGame);\n    }\n    this.dragDidStop();\n  }\n\n  dragDidStop() {\n    this.setState(DEFAULT_STATE);\n  }\n\n  isPegDraggable(row, col) {\n    return this.props.game.getValidMovesAt(row, col).length > 0;\n  }\n\n  isMoving() {\n    return this.state.moveSrcRow >= 0 && this.state.moveSrcCol >= 0;\n  }\n\n  isCandidateTarget(row, col) {\n    return !!this.state.candidateTargets.find(\n      (move) => move[0] === row && move[1] === col\n    );\n  }\n}\n","import React from \"react\";\nimport { ALGORITHMS } from \"./game/Algorithms\";\n\nexport class AlgorithmSelector extends React.Component {\n  render() {\n    return (\n      <select\n        value={this.props.value}\n        onChange={(event) =>\n          this.props.onAlgorithmChange(\n            ALGORITHMS.find(\n              (algorithm) => algorithm.name === event.target.value\n            )\n          )\n        }\n      >\n        {ALGORITHMS.map((algorithm) => (\n          <option key={algorithm.name} value={algorithm.name}>\n            {algorithm.name}\n          </option>\n        ))}\n      </select>\n    );\n  }\n}\n","export class DecisionNode {\r\n  constructor(game, parent = null) {\r\n    this._game = game;\r\n    this._parent = parent;\r\n    this._children = null;\r\n  }\r\n\r\n  get parent() {\r\n    return this._parent;\r\n  }\r\n\r\n  clearParent() {\r\n    this._parent = null;\r\n  }\r\n\r\n  get game() {\r\n    return this._game;\r\n  }\r\n\r\n  get children() {\r\n    if (this._children === null) {\r\n      this._children = this.game\r\n        .getPossibleMoves()\r\n        .map((game) => new DecisionNode(game, this));\r\n    }\r\n    return this._children;\r\n  }\r\n\r\n  getSubtreeSize(maxHeight) {\r\n    if (maxHeight < 1)\r\n      throw new Error(\r\n        `maxHeight should be at least 1, got ${maxHeight} instead`\r\n      );\r\n    if (maxHeight === 1) return 1;\r\n    return this.children\r\n      .map((node) => node.getSubtreeSize(maxHeight - 1))\r\n      .reduce((x, y) => x + y, 1);\r\n  }\r\n\r\n  findChildByGame(game) {\r\n    return this.children.find((child) => child.game.equals(game));\r\n  }\r\n}\r\n","import { Game } from \"./Game\";\r\nimport { DecisionNode } from \"./DecisionNode\";\r\nimport { makeDefaultAlgorithmParams } from \"./Algorithms\";\r\n\r\nexport class Bot {\r\n  constructor(algorithm, params) {\r\n    this._algorithm = algorithm;\r\n    this._params = params || makeDefaultAlgorithmParams(algorithm);\r\n  }\r\n\r\n  run() {\r\n    const game = new Game();\r\n    let decisionNode = new DecisionNode(game);\r\n    while (!decisionNode.game.isOver()) {\r\n      decisionNode = this._algorithm.play(decisionNode, this._params);\r\n      decisionNode.clearParent();\r\n    }\r\n    return decisionNode.game;\r\n  }\r\n\r\n  get scores() {\r\n    return this._scores || [];\r\n  }\r\n\r\n  get times() {\r\n    return this._times || [];\r\n  }\r\n\r\n  runMany(n) {\r\n    this._scores = [];\r\n    this._times = [];\r\n    for (let i = 0; i < n; i++) {\r\n      const t0 = performance.now();\r\n      const game = this.run();\r\n      const t1 = performance.now();\r\n\r\n      this._scores.push(game.numPegsLeft());\r\n      this._times.push(t1 - t0);\r\n    }\r\n  }\r\n}\r\n","import React from \"react\";\nimport \"./DebugTools.css\";\nimport { AlgorithmSelector } from \"./AlgorithmSelector\";\nimport {\n  DEFAULT_ALGORITHM,\n  makeDefaultAlgorithmParams,\n} from \"./game/Algorithms\";\nimport { Bot } from \"./game/Bot\";\n\nconst truncateFloat = (x) => parseInt(x * 100) / 100;\n\nexport class DebugTools extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      ...this.makeDefaultAlgorithmState(DEFAULT_ALGORITHM),\n      numIterations: 10,\n      scores: [],\n      times: [],\n    };\n  }\n\n  makeDefaultAlgorithmState(algorithm) {\n    return {\n      algorithm: algorithm,\n      algorithmParams: makeDefaultAlgorithmParams(algorithm),\n    };\n  }\n\n  render() {\n    return (\n      <div className=\"debug-tools\">\n        <div className=\"inputs\">\n          <p>\n            Algorithm:\n            <AlgorithmSelector\n              value={this.state.algorithm.name}\n              onAlgorithmChange={(algorithm) =>\n                this.setState(this.makeDefaultAlgorithmState(algorithm))\n              }\n            />\n          </p>\n\n          {Object.entries(this.state.algorithm.params).map(\n            ([key, paramDescriptor]) => (\n              <p key={key}>\n                {paramDescriptor.name}:\n                <input\n                  type=\"number\"\n                  min={paramDescriptor.min}\n                  max={paramDescriptor.max}\n                  value={this.state.algorithmParams[key]}\n                  onChange={(event) =>\n                    this.setState({\n                      algorithmParams: {\n                        ...this.state.algorithmParams,\n                        [key]: +event.target.value,\n                      },\n                    })\n                  }\n                />\n              </p>\n            )\n          )}\n\n          <p>\n            Number of iterations:\n            <input\n              type=\"number\"\n              min=\"1\"\n              value={this.state.numIterations}\n              onChange={(event) =>\n                this.setState({ numIterations: event.target.value })\n              }\n            />\n          </p>\n\n          <button onClick={() => this.run()}>Run</button>\n        </div>\n        <div className=\"output\">\n          {this.state.scores.length > 0\n            ? this.nonEmptyOutput()\n            : this.emptyOutput()}\n        </div>\n      </div>\n    );\n  }\n\n  emptyOutput() {\n    return (\n      <div>\n        <p>Selected algorithm: {this.state.algorithm.name}</p>\n        <p>Number of iterations: {this.state.numIterations}</p>\n      </div>\n    );\n  }\n\n  nonEmptyOutput() {\n    const scoresStats = this.computeStats(this.state.scores);\n    const timeStats = this.computeStats(this.state.times);\n\n    return (\n      <div className=\"non-empty-output\">\n        {this.statsTable(timeStats, \"Time stats\")}\n\n        {this.statsTable(scoresStats, \"Scores stats\")}\n\n        <table>\n          <caption>Scores histogram</caption>\n          <thead>\n            <tr>\n              <th>Score</th>\n              <th>Frequency</th>\n              <th>Bar plot</th>\n            </tr>\n          </thead>\n          <tbody>\n            {Array.from(scoresStats.histogram.entries()).map((entry) => (\n              <tr key={entry[0]}>\n                <td>{entry[0]}</td>\n                <td>{entry[1]}</td>\n                <td className=\"histogram-bar\">{\"*\".repeat(entry[1])}</td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n\n  statsTable(stats, caption) {\n    return (\n      <table>\n        <caption>{caption}</caption>\n        <thead>\n          <tr>\n            <th>Statistic</th>\n            <th>Value</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td>Min</td>\n            <td>{truncateFloat(stats.min)}</td>\n          </tr>\n          <tr>\n            <td>Max</td>\n            <td>{truncateFloat(stats.max)}</td>\n          </tr>\n          <tr>\n            <td>Mean</td>\n            <td>{truncateFloat(stats.mean)}</td>\n          </tr>\n          <tr>\n            <td>Std. dev.</td>\n            <td>{truncateFloat(stats.stdDev)}</td>\n          </tr>\n        </tbody>\n      </table>\n    );\n  }\n\n  run() {\n    const bot = new Bot(this.state.algorithm, this.state.algorithmParams);\n    bot.runMany(this.state.numIterations);\n    this.setState({\n      scores: bot.scores,\n      times: bot.times,\n    });\n  }\n\n  computeStats(values) {\n    const mean = values.reduce((x, y) => x + y, 0) / values.length;\n    const stdDev = Math.sqrt(\n      values.reduce((prev, x) => prev + Math.pow(x - mean, 2), 0) /\n        values.length\n    );\n\n    return {\n      min: Math.min(...values),\n      max: Math.max(...values),\n      mean: mean,\n      stdDev: stdDev,\n      histogram: this.computeHistogram(values),\n    };\n  }\n\n  computeHistogram(scores) {\n    scores.sort((a, b) => a - b);\n    const histogram = new Map();\n    scores.forEach((score) => {\n      if (!histogram.has(score)) histogram.set(score, 0);\n      histogram.set(score, histogram.get(score) + 1);\n    });\n    return histogram;\n  }\n}\n","import { DecisionNode } from \"./DecisionNode\";\r\nimport { Game } from \"./Game\";\r\n\r\nexport class DecisionTree {\r\n  constructor() {\r\n    this.restart();\r\n  }\r\n\r\n  restart() {\r\n    this._rootNode = new DecisionNode(new Game());\r\n    this._currentNode = this._rootNode;\r\n    this._mostRecentNode = this._rootNode;\r\n  }\r\n\r\n  get currentNode() {\r\n    return this._currentNode;\r\n  }\r\n\r\n  get game() {\r\n    return this._currentNode.game;\r\n  }\r\n\r\n  move(gameOrNode) {\r\n    let newNode;\r\n    if (gameOrNode instanceof Game) {\r\n      newNode = this._currentNode.findChildByGame(gameOrNode);\r\n      if (!newNode) throw new Error(\"Tried to move to an unreachable position\");\r\n    } else if (gameOrNode instanceof DecisionNode) {\r\n      newNode = gameOrNode;\r\n      if (!this.currentNode.children.includes(newNode)) {\r\n        throw new Error(\"Tried to move to an unreachable position\");\r\n      }\r\n    } else {\r\n      throw new Error(\"move() accepts Game or DecisionNode objects only.\");\r\n    }\r\n    this._currentNode = newNode;\r\n    this._mostRecentNode = newNode;\r\n  }\r\n\r\n  canUndo() {\r\n    return this._currentNode !== this._rootNode;\r\n  }\r\n\r\n  canRedo() {\r\n    return this._currentNode !== this._mostRecentNode;\r\n  }\r\n\r\n  undo() {\r\n    if (!this.canUndo()) {\r\n      throw new Error(\"Already at earliest move\");\r\n    }\r\n    this._currentNode = this._currentNode.parent;\r\n  }\r\n\r\n  redo() {\r\n    if (!this.canRedo()) {\r\n      throw new Error(\"Already at most recent move\");\r\n    }\r\n    let node = this._mostRecentNode;\r\n    while (node.parent !== this._currentNode) {\r\n      node = node.parent;\r\n    }\r\n    this._currentNode = node;\r\n  }\r\n}\r\n","import React from \"react\";\nimport \"./App.css\";\nimport { DEFAULT_ALGORITHM } from \"./game/Algorithms\";\nimport { Board } from \"./Board\";\nimport { DebugTools } from \"./DebugTools\";\nimport { AlgorithmSelector } from \"./AlgorithmSelector\";\nimport { DecisionTree } from \"./game/DecisionTree\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      algorithm: DEFAULT_ALGORITHM,\n      decisionTree: new DecisionTree(),\n    };\n  }\n\n  newMovement() {\n    const defaultParams = {};\n    Object.entries(this.state.algorithm.params).forEach(\n      ([key, value]) => (defaultParams[key] = value.default)\n    );\n    this.state.decisionTree.move(\n      this.state.algorithm.play(this.state.decisionTree.currentNode, {\n        height: 2,\n        pow: 30,\n      })\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"app\">\n        <div className=\"board-and-controls\">\n          <Board\n            game={this.state.decisionTree.game}\n            gameChangedCb={(newGame) => {\n              this.onGameChange(newGame);\n              this.forceUpdate();\n            }}\n          />\n          <div className=\"controls\">\n            <button\n              onClick={() => {\n                this.newMovement();\n                this.forceUpdate();\n              }}\n              disabled={this.state.decisionTree.game.isOver()}\n            >\n              New movement\n            </button>\n            <AlgorithmSelector\n              value={this.state.algorithm.name}\n              onAlgorithmChange={(algorithm) =>\n                this.onAlgorithmChange(algorithm)\n              }\n            />\n            <button\n              onClick={() => {\n                this.state.decisionTree.undo();\n                this.forceUpdate();\n              }}\n              disabled={!this.state.decisionTree.canUndo()}\n            >\n              Undo\n            </button>\n            <button\n              onClick={() => {\n                this.state.decisionTree.redo();\n                this.forceUpdate();\n              }}\n              disabled={!this.state.decisionTree.canRedo()}\n            >\n              Redo\n            </button>\n            <button\n              onClick={() => {\n                this.state.decisionTree.restart();\n                this.forceUpdate();\n              }}\n            >\n              Restart\n            </button>\n          </div>\n        </div>\n        <DebugTools />\n      </div>\n    );\n  }\n\n  onGameChange(newGame) {\n    this.state.decisionTree.move(newGame);\n  }\n\n  onAlgorithmChange(algorithm) {\n    this.setState({ algorithm: algorithm });\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}